# Qual letra mais aparece na frase: 
frase = 'O Python √© uma linguagem de programa√ß√£o multiparadigma. Python foi criado por Guid Van Rossum.'
#count() m√©todo stringo para contar o n√∫mero de ocorr√™ncias do parametro passado;
# print(frase.count('Python'))
#Lembrando que STRING √© iter√°vel, ent√£o vamos usar o WHILE para percorre- la;
i = 0
qtd_apareceu_mais_vezes = 0
letra_apareceu_mais_vezes = ''

while i < len(frase): 
    letra_atual = frase[i]

    if letra_atual == ' ':
        i += 1
        continue
    
    quantas_vezes_letra_apareceu_atual = frase.count(letra_atual)

    if qtd_apareceu_mais_vezes < quantas_vezes_letra_apareceu_atual:
        qtd_apareceu_mais_vezes = quantas_vezes_letra_apareceu_atual
        letra_apareceu_mais_vezes = letra_atual

    i += 1

print(f"Letra '{letra_apareceu_mais_vezes}' apareceu mais vezes. Total de {qtd_apareceu_mais_vezes} ocorr√™ncias")

""" 
    Vamos passar por cada linha do c√≥digo para entender detalhadamente o que est√° acontecendo:
1. Declara√ß√£o de vari√°veis iniciais

i = 0
qtd_apareceu_mais_vezes = 0
letra_apareceu_mais_vezes = ''

    i = 0: Esta vari√°vel i ser√° usada como um √≠ndice para percorrer cada caractere da string frase.
    qtd_apareceu_mais_vezes = 0: Esta vari√°vel armazenar√° o n√∫mero de ocorr√™ncias da letra que aparece mais vezes na string.
    letra_apareceu_mais_vezes = '': Esta vari√°vel armazenar√° a letra que mais apareceu na string.

2. In√≠cio do la√ßo while

while i < len(frase):

    Este la√ßo while vai iterar sobre a string frase, caractere por caractere, at√© o √≠ndice i alcan√ßar o tamanho da string (len(frase)).

3. Pegando o caractere atual

    letra_atual = frase[i]

    Aqui, a vari√°vel letra_atual recebe o caractere na posi√ß√£o i da string frase. Isso permite verificar e comparar a letra em cada itera√ß√£o.

4. Ignorando espa√ßos em branco

    if letra_atual == ' ':
        i += 1
        continue

    Se o caractere atual for um espa√ßo (' '), o la√ßo simplesmente avan√ßa para o pr√≥ximo caractere, ignorando o espa√ßo.
    i += 1: Incrementa i para mover para o pr√≥ximo caractere.
    continue: Faz com que a itera√ß√£o atual do while seja interrompida e a pr√≥xima itera√ß√£o seja iniciada imediatamente, ignorando o c√≥digo abaixo.

5. Contando as ocorr√™ncias da letra atual

    quantas_vezes_letra_apareceu_atual = frase.count(letra_atual)

    O m√©todo count() √© usado para contar quantas vezes a letra_atual aparece em toda a string frase. O valor √© armazenado em quantas_vezes_letra_apareceu_atual.

6. Verificando se a letra atual √© a mais frequente at√© agora

    if qtd_apareceu_mais_vezes < quantas_vezes_letra_apareceu_atual:
        qtd_apareceu_mais_vezes = quantas_vezes_letra_apareceu_atual
        letra_apareceu_mais_vezes = letra_atual

    Aqui, o c√≥digo verifica se o n√∫mero de ocorr√™ncias da letra_atual √© maior do que o n√∫mero de ocorr√™ncias da letra mais frequente encontrada at√© o momento (qtd_apareceu_mais_vezes).
        Se for maior, a vari√°vel qtd_apareceu_mais_vezes √© atualizada para o novo valor (o n√∫mero de ocorr√™ncias da letra_atual), e a vari√°vel letra_apareceu_mais_vezes √© atualizada para a letra que apareceu mais vezes at√© aquele momento.

7. Incrementando o √≠ndice para a pr√≥xima itera√ß√£o

    i += 1

    Incrementa i para avan√ßar para o pr√≥ximo caractere da string.

8. Exibindo o resultado

print(f"Letra '{letra_apareceu_mais_vezes}' apareceu mais vezes. Total de {qtd_apareceu_mais_vezes} ocorr√™ncias")

    Ap√≥s o la√ßo while terminar, o c√≥digo imprime qual letra apareceu mais vezes na frase, junto com o n√∫mero total de ocorr√™ncias dessa letra.

Exemplo de execu√ß√£o passo a passo:

Considere que a string frase seja:

frase = "abacadae"

    Primeira itera√ß√£o (i = 0): letra_atual = 'a'
        quantas_vezes_letra_apareceu_atual = 4 (porque 'a' aparece 4 vezes)
        qtd_apareceu_mais_vezes √© atualizado para 4 e letra_apareceu_mais_vezes para 'a'.

    Segunda itera√ß√£o (i = 1): letra_atual = 'b'
        quantas_vezes_letra_apareceu_atual = 1 (porque 'b' aparece 1 vez)
        N√£o atualiza as vari√°veis, pois 1 √© menor do que 4.

    Terceira itera√ß√£o (i = 2): letra_atual = 'a'
        quantas_vezes_letra_apareceu_atual = 4 (porque 'a' aparece 4 vezes)
        N√£o atualiza, pois a contagem n√£o mudou.

    Quarta itera√ß√£o (i = 3): letra_atual = 'c'
        quantas_vezes_letra_apareceu_atual = 1 (porque 'c' aparece 1 vez)
        N√£o atualiza.

    E assim por diante...

No final da execu√ß√£o, o programa determinar√° que a letra 'a' foi a mais frequente e imprimir√°:

Letra 'a' apareceu mais vezes. Total de 4 ocorr√™ncias

Considera√ß√µes finais:

    Efici√™ncia: O c√≥digo utiliza o m√©todo count() em cada itera√ß√£o, o que pode ser ineficiente para strings grandes. Cada chamada do count() percorre toda a string para contar as ocorr√™ncias da letra, o que resulta em uma complexidade O(n¬≤) no pior caso (onde n √© o tamanho da string).
    Solu√ß√£o mais eficiente: Uma alternativa mais eficiente seria usar um dicion√°rio para armazenar as ocorr√™ncias de cada caractere enquanto percorre a string uma √∫nica vez.

Se precisar de mais detalhes ou otimiza√ß√µes, me avise! üòä
"""